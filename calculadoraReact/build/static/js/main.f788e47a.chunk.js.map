{"version":3,"sources":["components/Button/Button.jsx","App.jsx","components/Functions.jsx","components/MathOperations.jsx","components/Numbers.jsx","components/Result.jsx","index.jsx"],"names":["Button","type","text","clickHandler","className","onClick","defaultProps","App","useState","texto","setTexto","items","words","onClickOperationFunction","operation","includes","charAt","length","newTexto","substring","onClickEqualFunction","equal","eval","toString","onClearContentFunction","clear","onDeleteFunction","borrar","onClickNumberFunction","numero","value","onClickNumber","onClearContent","onDelete","onClickOperation","onClickEqual","Functions","operators","renderOperators","map","operator","MathOperations","numbers","renderButtons","number","Numbers","Result","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.f788e47a.chunk.js","sourcesContent":["// importar React\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// importar CSS\r\nimport './Button.css'\r\n\r\n// Componente funcional\r\nconst Button = ({type, text, clickHandler}) => (\r\n        <button className={type} onClick={ () => clickHandler(text)}>\r\n            <span>{text}</span>\r\n        </button>\r\n    )\r\n\r\nButton.propTypes = {\r\n    type : PropTypes.string,\r\n    text : PropTypes.string.isRequired,\r\n    clickHandler: PropTypes.func.isRequired\r\n}\r\nButton.defaultProps = {\r\n    \r\n}\r\n\r\n// Exportación del componente para su consumo desde otro componente\r\nexport default Button;","/* eslint no-eval: 0 */ // desactiva el warning de usar eval que es potencialmente peligrosa\r\n\r\n// Estructura básica de cualquier componente.\r\n\r\n// Importacion de las librerias necesarias\r\nimport React, {useState} from 'react';\r\nimport words from 'lodash.words';\r\nimport Functions from './components/Functions';\r\nimport MathOperations from './components/MathOperations';\r\nimport Numbers from './components/Numbers';\r\nimport Result from './components/Result';\r\n\r\n// por convención, el css siempre al último\r\nimport './App.css'; // el css se importa directamente... colocando la ruta.\r\n\r\n// Generación de la función del componente\r\nconst App = () => {\r\n\r\n    // Array destructuring\r\n    const [texto, setTexto ] = useState(\"\");\r\n    const items = words(texto, /[^-^+^*^/]+/g);\r\n    \r\n    // funciones de los componentes\r\n    const onClickOperationFunction = operation => {\r\n        const operadores = [\"+\",\"-\",\"*\",\"/\"];\r\n        if(operadores.includes(texto.charAt(texto.length-1))){\r\n            const newTexto = texto.substring(0 , texto.length -1);\r\n            setTexto(`${newTexto}${operation}`);\r\n        } else {\r\n            setTexto(`${texto}${operation}`);\r\n        }\r\n    }\r\n    const onClickEqualFunction = equal => setTexto(!texto ? '' : (eval(texto).toString()));\r\n    \r\n    const onClearContentFunction = clear => setTexto(\"\");\r\n    \r\n    const onDeleteFunction = borrar => {\r\n        \r\n        if(texto.length > 0){\r\n            \r\n            const newTexto = texto.substring(0 , texto.length -1);\r\n            setTexto(newTexto);\r\n        }\r\n    }\r\n    const onClickNumberFunction = numero => { \r\n        setTexto(`${texto}${numero}`);\r\n    }\r\n    // creamos una constante que guarde el valor a mostrar luego de validar si está vacío o no\r\n    const value = items.length > 0 ? items[items.length-1] : \"0\";\r\n\r\n    // lo que ejecuta la arrow function\r\n    // Si usamos más de una línea tiene que estar entre parentesis\r\n    return (\r\n        <main className='react-calculator'>\r\n            <div>\r\n                <Result value={value}/>\r\n            </div>\r\n            <div className='grid'>\r\n                <Numbers\r\n                    onClickNumber = {onClickNumberFunction}\r\n                />\r\n                <Functions \r\n                    onClearContent = {onClearContentFunction} \r\n                    onDelete = {onDeleteFunction}\r\n                />\r\n                <MathOperations \r\n                    onClickOperation = {onClickOperationFunction} \r\n                    onClickEqual = {onClickEqualFunction}\r\n                />\r\n            </div>\r\n        </main>\r\n    )\r\n}\r\n\r\n// La exportación para que este disponible para ser utilizado.\r\nexport default App;","// importar React\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from './Button/Button';\r\n\r\n// Componente funcional\r\nconst Functions = ({onClearContent, onDelete}) => (\r\n        <section className=\"functions\">\r\n            <Button type=\"button-long button-long-text\" text=\"borrar\" clickHandler={onClearContent}/>\r\n            <Button type=\"button-long\" text=\"&larr;\" clickHandler={onDelete}/>\r\n            \r\n        </section>\r\n    )\r\n\r\nFunctions.propTypes = {\r\n    onClearContent : PropTypes.func.isRequired,\r\n    onDelete : PropTypes.func.isRequired\r\n}\r\nFunctions.defaultProps = {\r\n    \r\n}\r\n\r\n// Exportación del componente para su consumo desde otro componente\r\nexport default Functions;","// importar React\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from './Button/Button';\r\n\r\n// Componente funcional\r\nconst operators = [\"+\",\"-\",\"*\",\"/\",\"=\"];\r\nconst renderOperators = (onClickOperation, onClickEqual) => {\r\n\r\n    const renderOperator = (operator => {\r\n        let onClick; \r\n        if(operator !== \"=\"){\r\n            onClick = onClickOperation;\r\n        } else {\r\n            onClick = onClickEqual;\r\n        }   \r\n        return <Button \r\n                    key={operator} \r\n                    text={operator} \r\n                    clickHandler={onClick}\r\n                />     \r\n    })\r\n    return operators.map(renderOperator);\r\n\r\n}\r\nconst MathOperations = ({onClickOperation, onClickEqual}) => (\r\n        <section className=\"math-operations\">\r\n            {renderOperators(onClickOperation, onClickEqual)}\r\n        </section>\r\n    )\r\n\r\nMathOperations.propTypes = {\r\n    onClickOperation : PropTypes.func.isRequired,\r\n    onClickEqual : PropTypes.func.isRequired\r\n}\r\nMathOperations.defaultProps = {\r\n    \r\n}\r\n\r\n// Exportación del componente para su consumo desde otro componente\r\nexport default MathOperations;","// Importar React\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Button from './Button/Button';\r\n\r\n// DRY (Don´t Repeat Yourself)\r\n\r\nconst numbers = [7,8,9,4,5,6,1,2,3,0];\r\n\r\nconst renderButtons = onClickNumber => {\r\n\r\n    const renderButton = number => (\r\n        <Button \r\n            key={number} \r\n            type=\"cero\"\r\n            text={number.toString()} \r\n            clickHandler={onClickNumber}\r\n        />\r\n    )\r\n    return numbers.map(renderButton)\r\n}\r\n\r\nconst Numbers = ({onClickNumber}) => (\r\n    <section className=\"numbers\">\r\n        {renderButtons(onClickNumber)}\r\n    </section>    \r\n);\r\n\r\nNumbers.propTypes = {\r\n    onClickNumber : PropTypes.func.isRequired\r\n}\r\n\r\n// exportar componente\r\nexport default Numbers;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Result = ({value }) =>  // si pongo entre llaves la propiedad es igual que el destructuring. Sería igual const {value} = props; // destructuring de props.\r\n(\r\n    <div className=\"result\">\r\n        <span>{value}</span>\r\n    </div>    \r\n)\r\n\r\nResult.propTypes = {\r\n    value : PropTypes.string.isRequired\r\n}\r\nResult.defaultProps = {\r\n    value : \"0\"\r\n}\r\n\r\nexport default Result;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\n// Importar el componente a renderizar\r\nimport App from './App'; // ruta relativa siempre sin extensión\r\n\r\n\r\n// Utilizar el componente\r\nReactDOM.render(<App />, // se puede cerrar así o <App></App>\r\n    document.querySelector('#root'));"],"sourceRoot":""}